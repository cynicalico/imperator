name: build

on: [push, pull_request]

env:
  CCACHE_VERSION: 4.7.3
  CCACHE_BASEDIR: ${GITHUB_WORKSPACE}
  CCACHE_DIR: ${GITHUB_WORKSPACE}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_MAXSIZE: 400M

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:          
    - uses: actions/checkout@v3
    
    - name: Set up cache
      id: cache-cpm
      uses: actions/cache@v2.1.8
      with:
        path: ~/cpm-cache
        key: ${{ runner.os }}-cpm-${{ hashFiles('**/') }}
        restore-keys: |
          ${{ runner.os }}-cpm-
          
    - name: Set up GCC
      if: matrix.os == 'ubuntu-latest'
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 12
        platform: x64
    
    - name: Install build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt install xorg-dev
          
    - name: Download ccache
      id: ccache
      run: |
        set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
        file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)
      shell: cmake -P {0}
      
    - name: Add ccache to PATH
      run: echo "$(pwd)" >> $GITHUB_PATH
      
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files
      id: ccache_cache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-
    
    - name: Build with CMake
      run: |
        mkdir build
        cmake -Bbuild -S. -DUSE_CCACHE=YES -DCPM_SOURCE_CACHE=~/cpm-cache
        cmake --build build/ --parallel 2
